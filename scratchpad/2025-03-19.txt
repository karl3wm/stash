I'm running into an issue where a python loop over integers calling gcd() appears to execute faster than a numpy modulo operation over a vector of the same data.

I'm making a folder here with a test python file in it to troubleshoot.

The test did not reproduce the issue. I'll need to bisect from the original code to see what stimulates it. Nice to see numpy behaving fast again.

I'm actually getting quite different numbers. I'd better track these things.

2025-03-19
    0000-test.py test file, does not appear to replicate behavior. math_gcd = 0.1154  numpy_mod = 0.00646
    0001.py code demonstrating issue, unisolated.                  math_gcd = 1.92e-6 igcd = 0.00498
    observing now that an editing mistake is in the file: I meant to return prior to the `if` block, short-circuiting it. i was not testing what i thought i was.
    maybe i made the change and forgot to save the file before running it.
    0002.py readded the short circuit. still demonstrates issue.   math_gcd = 1.48e-6 igcd = 0.004177
    0003.py removed extra things from 0002.py, changed names.      math_gcd = 1.61e-6 numpy_mod = 0.00617
    0004-shows-disparity-across-two-changes.py i simplified the test function and removed two unused lines
        it no longer shows the issue -- now math_gcd is slow again.
        i'm guessing it's the unused line removal that caused this.
        i'm guessing that python is caching the result.            math_gcd = 0.11312 numpy_mod = 0.0064
    0005.py i added a line back and the issue returned             math_gcd = 9.4e-7  numpy_mod = 0.0069

So I've now found a change that causes this particular issue to appear or disappear.
However, this test is taken from https://stackoverflow.com/a/15570694/29165416 which did indeed include a line like this, and did indeed show numpy as faster than math.gcd .
It did not pass number=1 to timeit, running instead each expression a million times.
I added the number=1 to try to address a problem just like the one just resolved.
So the original concern is not yet isolated.

    0006-baseline.py ported the so code to a python3 sourcefile   gcd = 0.0934        numpy_gcd = 115.014

ok, so now I'm seeing the issue again even in this code.
I thought I didn't see the issue running this code locally earlier. And it looks like the poster is using ipython sessions or something when they don't demonstrate the issue.
I'm guessing that both I and the poster had earlier run the code in different contexts in some manner such that the caching didn't happen.
Also noting that this kind of caching is strange to see: it seems like a JIT-style feature that avoids evaluating all the bytecode. I could be wrong.
Usually cpython gives the impression of being pretty strict with regard to evaluating all its bytecode.

So lets see if this is changed by removing the same line.
Oops I'll also reduce the iteration count so I don't have to wait 100-250 seconds for the result.

    0007.py removed the same line from baseline and reduced count   gcd = 0.0002      numpy_gcd = 0.1286

Ok, so now we're strangely seeing the same issue even with the caching line removed!

So that's quite confusing and I'm not sure what's causing it here (although I
imagine it could be some subtle JIT behavior difference between the
sourceblobs, since the caching could happen inside the timeit loop too), but
there's now enough information to identify another cause and hence another
usseful part of the overall behavior as we have one that fails and one that
succeeds.

  0007.py: does do an additional early pass with math.gcd, does show a strangely much faster math.gcd than numpy result
  0004-*.py: does not do an additional early pass, and correctly shows numpy as faster than a loop
  0005.py: does do an additional early pass, and does show a strangely faster math.gcd loop
  otherwise, 0005 is purportedly identical to 0004

  so by moving 0007 and 0004/0005 to be more similar, we can in theory find a 2nd property that
  determines whether [math.gcd] appears faster or np.array()% does.

  lets give these different files different names depending on their properties,
  and slowlt mutate 1 property at a time as if to eventually make them the same file,
  and see where a change develops.

  0007 can be 'baseline' cause it had that name earlier, maybe 'baseline-fails' or 'fails-baseline'
  0004 can be 'succeeds'
  0005 can be 'fails-noprecalc'

0008-fails-baseline.py
numpy_gcd 0.12536599591840059
gcd 0.0003226289991289377
0008-fails-noprecalc.py
math_gcd 1.0200310498476028e-06
numpy_mod 0.006636276957578957
0008-succeeds.py
math_gcd 0.11253344092983752
numpy_mod 0.005545707070268691

    i'll probably mutate fails-baseline to be more like the other two
    and i named 0008-fails-noprecalc wrong.
    i'll rename them to 0008-fails-precalc.py and 0008-succeeds-noprecalc.py

0008-fails-baseline-0002.py
math_gcd 0.0003096899017691612
numpy_gcd 0.12585521198343486
0008-fails-baseline.py
numpy_gcd 0.12426589406095445
gcd 0.0002321799984201789
0008-fails-precalc.py
math_gcd 8.600763976573944e-07
numpy_mod 0.0071806469932198524
0008-succeeds-precalc.py
math_gcd 0.12951314100064337
numpy_mod 0.006288076983764768

    difference still present.
    i'm guessing it relates to the number of iterations here.
